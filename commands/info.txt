For fully functional slash commands, there are 3 important pieces of code that need to be written. They are
1) The individual command files, containing their definitions and functionality
2) The command handler, which dynamically reads the files and executes the commands
3) The command deployment script, to register your slash commands with Discord so they appear in the interface
All are required before the commands are fully functional

Step 1
- You'll be using the SlashCommandBuilder class to construct the command definitions
- At a minimum, the definition of a slash command must have a name and a description.
	- Slash command names must be between 1-32 characters and contain no capital letters, spaces, or symbols other than - and _
- A slash command also requires a function to run when the command is used, to respond to the interaction
- Using an interaction response method confirms to Discord that you rbot successfully recieved the interaction and has responded to the user
	- Discord enforces this to ensure that all slash commands provide a good user experience (UX)
	- Failing to respond will cause Discord to show that the command failed, even if your bot is performing other actions as a result
	- Simplest way to acknowledge and respond to an interaction is with the 'interaction.reply()' method
	- Other methods covered later

Step 2
- The command handler is implemented in the index file

Step 3
- The deployment script is run with 'npm run deploy'


Command Response Methods
- https://discordjs.guide/slash-commands/response-methods.html#editing-responses
- Most common way of sending a response is by using the .reply() method, which acknowledges the interactio and sends a new message in resposne
- Ephemeral Responses
	- May not always want everyone who has access to the channel to see a slash command's response
	- Previously had to DM users to acheive this
	- Now Discord provides a way to hide response messages from everyone but the executor of the slash command
	- Ephemeral messages can be set by providing 'ephemeral: true' in the reply options
		- await interaction.reply({content: 'Only u can see this', ephemeral: true});
		- await interaction.deferReply({ ephemeral: true});
		- await interaction.followUp({ content: 'Pong again', ephemeral: true});
	- It is not possible to edit a reply to change its ephemeral state once the initial response is sent
- Editing Responses
	- After you send an initial response, you may want to edit that response for various reasons
	- Can be achieved with await interaction.editReply('New editted message')
- Deferred Responses
	- Discord requires an acknowledgement from your bot within 3 seconds that the interaction was recieved, otherwise Discord considers it a failed interaction
	- Sometimes the command has to perform tasks that take longer than 3 seconds though
	- Can now use await interaction.deferReply()
		- Triggers the '<botname> is thinking...' message and acts as an initial resonse to confirm to Discord that the interaction was recieved successfully.
		- Also gives you a 15-minute timeframe to complete your tasks before responding
- Follow-Ups
	- .reply() and .deferReply() are both initial responses, which tell Discord that your bot successfully recieved the interaction, but cannot be used to send additional messages
	- After having initially responded to an interaction, you can used the interaction.followUp() to send additional messages
		- await interaction.reply('Pong')
		- await interaction.followUp('Pong again');
	--- Note: after the initial response, an interaction lifetime (token) is valid for 15 mintues, so this is the timeframe in which you can edit the response and send followUp messages
	--- Note: If you use .followUp() after a .deferReply(), the first followUp will edit the automatic defer message rather than sending a new one
- Fetching and Deleting Responses
	- Delete the initial reply
		- await interaction.deleteReply();
	- Fetch the Message object
		- Needed for various reasons, such as adding reactions
		- const message = await interaction.fetchReply();

Advanced Command Creation
- https://discordjs.guide/slash-commands/advanced-creation.html#adding-options
- Echo.js is a test of various advanced commands learned
- Adding Options
	- Application command can have additional options, think of them as arguments to a function, and as a way for the user to provide the additional information the command requires
	- Options require at minimum a name and description
		- Same restrictions as naming slash commands: 1-32 characters containing no capital letters, spaces, or symbols other than '-' and '_'
- Option Types 
	- By specifying the type of an ApplicationCommandOption using the appropriate emthod you are able to restrict what the user can provide as input and for some options leverage automatic parsing
	- Some examples of option types available
		- addStringOption		: accepts primitive value of associated type
		- addIntergerOption		: accepts primitive value of associated type, only whole numbers
		- addNumberOption		: accepts primitive value of associated type, accepts whole numbers and decimals
		- addBooleanOption		: accepts primitive value of associated type
		- addUserOption			: will show a selection list in the Discord interface for the associated type, list of users in server
		- addChannelOption		: will show a selection list in the Discord interface for the associated type, list of channels in server
		- addRoleOption			: will show a selection list in the Discord interface for the associated type, list of roles in server
		- addMentionableOption	: will show a selection list in the Discord interface for the associated type, list of mentions? in server
		- addAttachmentOption	: will prompt user to make an upload along with the slash command
		- addSubcommandOption	: allows you to have branching pathways of subsequent options for your command
		- addSubcommandGroupOption : same as above
- Required Options
	- An additional form of validation to ensure the data your bot recieves is both complete and accurate
	- This simple addition makes the option required, to ensure the command cannot be executed without a required value
	- Available to options of any type
	- option.setRequired(true);
- Choices
	- If you would prefer users select from predetermined values rather than free entry, choices can help enforce this
	- Choices require a name which is displayed to the user for selection
	- Choices require a value that your bot will recieve when the choice is selected
	- Available to String, Number, and Integer option types
	- Maximum # of choices is 25
	- option.addChoices(
		{ name: 'Option 1', value: 'valueForBot1' },
		{ name: 'Option 2', value: 'value2' }
	)
- Further Validation
	- Additional restrictions can still be applied on otherwise free inputs
	- For String options
		- .setMaxLength() enforces the max length
		- .setMinLength() enforces the min length
	- For Integer and Number options
		- .setMaxValue() enforces max value
		- .setMinValue() enforces min value
	- For Channel options
		- .addChannelType() can restrict selection to specific channel types e.g ChannelTyp.GuildText (text channels)
- Subcommands
	- Allows you to branch a single command to require different options depending on the subcommand chosen
	- info.js is a test of merging the server.js and user.js using this technique
	- .addSubcommand(subcommand => ...)

Parsing Options
- How to acces the values of a commands options
- Created ban.js file as example
- Modified echo.js and info.js execute functions as examples
- Command Options
	- Can retrieve the value of a command option by getting it's name
	- interaction.options.get____('option-name')
	- Choices
		- For choices, getting the value is the same as command options but the value will be one of the predefined ones set in .addChoices()
	- Subcommands
		- Can retrieve the value of a subcommand option by getting it's name as well
		- Can then get any additional options of the selected subcommand using the same method as command options
		- interaction.options.getSubcommand()

Slash Command Permissions
- Slash commands have their own permissions system, which allows you to set a default level of permissions requried for a user to execute
- Slash command permissions for guilds are  defaults only and can be altered by guild admins
- Created ban.js and kick.js as example
- SlashCommandBuilder has an option to set default permissions required for a member to run a command
	- .setDefaultMemberPermissions()
		- Note: Can include OR (|) operator to specify multiple permissions
	- Can import PermissionFlagsBits from discordjs to be able to reference specific permissions without knowing their code number
- SlashCommandBuilder has an option to set DM permission to specify is a command can be used in a DM to the bot
	- .setDMPermission()	: true/false
	- By default, globally-deployed commands are also available for use in DMs